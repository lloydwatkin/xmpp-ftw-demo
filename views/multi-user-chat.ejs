<% 
    pageTitle = "XEP-0045 Multi-user Chat (MUC)"
%>
<% include ./partials/head %>
        
        <div id="toc"></div>

        <h3>Join a room</h3>
        
        <pre class="out" message="xmpp.muc.join">
        socket.emit(
            'xmpp.muc.join',
            {
                "room": "test@conference.evilprofessor.co.uk",
                "nick": "MyNickname"
            }
        )
        </pre>
        
        <h3>Receive room roster</h3>
        
        <pre class="in" message="xmpp.muc.roster">
        socket.on('xmpp.muc.roster', function(data) { console.log(data) })
        </pre>
        
        <p>Example: <i>You may receive many of these messages</i></p>

        <pre class="example">
          {
              room: 'test@conference.evilprofessor.co.uk',
              nick: 'TheirNickname',
           /* affiliation: 'member', */
           /* role: 'member', */
           /* status: [] *
          }
        </pre>
        
        <p>'Affilition' and 'role' tend to be sent on affiliation or role changes. 
        A nickname change will have a status code of <strong>303</strong>.</p>
         
        <h3>Receive a message</h3>
         
        <pre class="in" message="xmpp.muc.message">
        socket.on('xmpp.muc.message', function(data) { console.log(data) })
        </pre>

        <p>Example:</p>

        <pre class="example">
          {
              room: 'test@conference.evilprofessor.co.uk',
              nick: 'TheirNickname',
              content: '&lt;p&gt;Hello &lt;b&gt;world&lt;/b&gt;!&lt;/p&gt;',
              format: 'xhtml',
           /* delay: { when: '2012-03-03T20:22:00Z' }, */
           /* private: false, */
           /* state: 'composing' */
          }
        </pre>

        <p>For plain text IMs the '<em>format</em>' attribute will be 
        <b>plain</b>, for XEP-0071 messages it will be <b>xhtml</b>. 
        You will only ever receive a plain or XHTML message, not both.</p>

        <p>It is also possible to receive just a 
        <a href="http://xmpp.org/extensions/xep-0085.html" target="_blank">
        chat state notification</a> where only the '<em>state</em>' 
        property will be included.</p>

        <h3>Send a message</h3>
        
        <pre class="out" message="xmpp.muc.message">
        socket.emit(
            'xmpp.muc.message',
            {
                "room": "test@conference.evilprofessor.co.uk",
                "content": "Hello XMPP people!",
             /* "format": "plain" */
             /* "to": "TheirNickname", */
             /* "state": "composing" */
            }
        )
        </pre>

        <p>If 'to' is provided then message becomes a private message.</p>

        <p>If a user wishes to send a formatted message (i.e. XEP-0071) then 
        the value of '<em>format</em>' will be <b>xhtml</b>. XMPP-FTW 
        will generate a plain text version of an XHTML message for 
        sending.</p>
        
        <p>It is possible to send 
        <a href="http://xmpp.org/extensions/xep-0085.html" target="_blank">
        chat state notifications</a> by just sending the '<em>state</em>' 
        property.</p>

        <h3>Leave a room</h3>
        
        <pre class="out" message="xmpp.muc.leave">
        socket.emit(
            'xmpp.muc.leave',
            {
                "room": "test@conference.evilprofessor.co.uk"
             /* "reason": "Heading off for lunch..." */
            }
        )
        </pre>
        
        <h3>Errors</h3>
        
        <h4>Message Errors</h4>
        
        <pre class="in" message="xmpp.muc.error">
        socket.on('xmpp.muc.error', function(data) { console.log(data) })
        </pre>
        
        <p>Example:</p>
        
        <pre class="example">
          {
              type:  'message',
              error : {
                  type: 'service-unavailable',
                  condition: 'wait'
              },
              room:  'test@conference.evilprofessor.co.uk',
           /* content: 'Original message content' */
          }
        </pre>
        <p>Code will attempt to grab the extended reason from the 
        '<abbr title="urn:ietf:params:xml:ns:xmpp-stanzas">xmpp-stanzas</abbr>' namespaced 
        element, otherwise it will grab the 'type' attribute from the error tag.</p>

        <h3>Room subject</h3>

        <p>The room subject can be updated as follows:</p>

        <pre class="out" message="xmpp.muc.subject">
        socket.emit(
            'xmpp.muc.subject',
            {
             /* "subject": "XMPP-FTW Chat room" */
            }
        }
        </pre>

        <p>By not providing the '<em>subject</em>' the room subject 
        will be disabled.</p>

        <p>Updates to room subject will be recieved as follows:</p>

        <pre class="in" message="xmpp.muc.subject">
        socket.on('xmpp.muc.subject', function(data) { console.log(data) })
        </pre>

        <p>Where the <strong>data</strong> format is as follows:</p>

        <pre class="example">
        {
            room: "test@conference.evilprofessor.co.uk",
            subject: "XMPP-FTW Chat room",
        }
        </pre>

        <p>A value of <strong>false</strong> for the <em>subject</em> 
        key signifies that the room subject has been disabled.</p>

        <h3>Retrieve a list of users with specified role</h3>

        <pre class="out callback" message="xmpp.muc.role.get">
        socket.emit(
            'xmpp.muc.role.get', 
            {   
                "room": "xmpp@muc.evilprofessor.co.uk",
                "role": "participant"
            }, 
            function(error, data) { console.log(error, data) }
        )
        </pre>

        <p>Response will look as follows:</p>

        <pre class="example">
        [
            {
                affiliation: 'member',
                jid: {
                    user: 'megan',
                    domain: 'evilprofessor.co.uk',
                    resource: 'home'
                },
                nick: 'livelifevegan',
                role: 'participant'
            }
        ]
        </pre>

        <h3>Change a user's role</h3>
        
        <pre class="out callback" message="xmpp.muc.role.set">
        socket.emit(
            'xmpp.muc.role.set', 
            {
                "room": "test@conference.evilprofessor.co.uk",
                "nick": "TheirNickname",
                "role": "participant",
             /* "reason": "Trusted friend" */
            },
            function(error, data) { console.log(error, data) }
        )
        </pre>
        <p>`<em>data</em>` will be true and error <i>null</i> if all is ok.</p>
        
        <h3>Change a user's affiliation</h3>
        
        <pre class="out callback" message="xmpp.muc.affiliation">
        socket.emit(
            'xmpp.muc.role',
            {
                "room": "test@conference.evilprofessor.co.uk",
                "jid": "user@evilprofessor.co.uk",
                "affiliation": "outcast"
            }
            function(error, data) { console.log(error, data) }
        )
        </pre>
        
        <h3>Register with a room</h3>
        
        <h4>Get registration information</h4>
        
        <pre class="out callback" message="xmpp.muc.register.info">
        socket.emit(
            'xmpp.muc.register.info',
            {
                "room": "test@conference.evilprofessor.co.uk"
            },
            function(error, data) { console.log(error, data) }
        )
        </pre>
        
        <p>Example:</p>

        <pre class="example">
        {
            'instructions': 'Reply with the following form',
            'form': {
                title: 'Register with the dev room!',
                instructions: 'Please fill out all required fields',
                fields: [
                    {
                        type: 'hidden',
                        value: '',
                        var: 'muc#register_email',
                        required: true,
                     /* label: 'Email address' */
                    }
                ] 
            }
        }
        </pre>

        <p>If the user is already registerd then the response will look 
        as follows:</p>

        <pre class="example">
        {
            registered: true,
            nick: 'lloydwatkin'
        }
        </pre>

        <h4>Perform registration</h4>
        
        <pre class="out callback" message="xmpp.muc.register">
        socket.emit(
            'xmpp.muc.register',
            {
                "room": "test@conference.evilprofessor.co.uk",
                "form": [ ]
            },
            function(error, data) { console.log(error, data) }
        )
        </pre>

        <h3>Update room configuration</h3>
        
        <h4>Get room configuration</h4>
        
        <pre class="out callback" message="xmpp.muc.room.config.get">
        socket.emit(
            'xmpp.muc.room.config.get',
            { "room": "test@conference.evilprofessor.co.uk" },
            function(error, data) { console.log(error, data) }
        )
        </pre>
        
        <p>Response (can) look like this:</p>
        
        <pre class="example">
        {
            title: "Configuration for test@conference.evilprofessor.co.uk",
            instructions: "Configuration for test@conference.evilprofessor.co.uk",
            fields: [
                { var: "muc#roomconfig_roomname", type: "text-single", required: false, value: "test2", label: "Name" },
                { var: "muc#roomconfig_persistentroom", type: "boolean", required: false, value: false, label: "Make Room Persistent?" },
                { var: "muc#roomconfig_roomsecret", type: "text-private", required: false, value: "", label: "Password" },
                { 
                  var:      "muc#roomconfig_whois",
                  type:     "list-single",
                  required: false,
                  value:    "moderators,
                  label:    "Who May Discover Real JIDs?",
                  options:  [{ label: "Moderators", value: "moderators"}, {label: "Anyone", value: "anyone" }]
                },
            ],
        }
        </pre>

        <h4>Set room configurtion</h4>
        
        <pre class="out callback" message="xmpp.muc.room.config.set">
        socket.emit(
            'xmpp.muc.room.config.set',
            { "room": "test@conference.evilprofessor.co.uk", "form": [ ] },
            function(error, data) { console.log(error, data) }
        )
        </pre>
        
        <p>Form data example:</p>
        <pre class="example">
        {
            room: 'test@conference.evilprofessor.co.uk',
            form: [
                { field: 'muc#roomconfig_membersonly', value: true },
                { field: 'muc#roomconfig_roomname', value: 'Cool XMPP-FTW configured room' },
                { field: 'muc#roomconfig_roomsecret', value: 'abracadabra' }
            ]
        }
        </pre>
        
        <h4>Updates to room configuration</h4>
        
        <pre class="in" message="xmpp.muc.room.config">
        socket.on('xmpp.muc.room.config', function(data) { console.log(data) })
        </pre>
        
        <p>Example confguration updates:</p>
        
        <pre class="example">
        {
            room: test@conference.evilprofessor.co.uk',
            status: [ 100, 110, 104 ]
        }
        </pre>

        <h3>Create a room</h3>

        <pre class="out callback" message="xmpp.muc.create">
        socket.emit(
            'xmpp.muc.create',
            {
                "room": "test@conference.evilprofessor.co.uk",
             /* "form": [] */
            },
            function(error, data) { console.log(error, data) }
        )
        </pre>

        <p>On success <em>data</em> will simply be true.</p>

        <p>Not providing a <strong>form</strong> key will result 
        in the creation of an instant room (default settings).</p>

        <p>By providing a <strong>form</strong> key you are requesting 
        a reserved room with a set configuration. In order to retrieve 
        configurable values make a call using 
        <a href="#get-room-configuration">xmpp.muc.config.get</a> to 
        the JID of the room you wish to create.</p>

        <h3>Delete a room</h3>

        <pre class="out callback" message="xmpp.muc.destory">
        socket.emit(
            'xmpp.muc.destroy',
            {
                "room": "test@conference.evilprofessor.co.uk",
             /* "reason": "Was just a test room" */
            },
            function(error, data) { console.log(error, data) }
        )
        </pre>

        <p>On success <em>data</em> will simply be <strong>true</strong>.</p>

        <p>Clients will be informed of a room destroy via the incoming 
        `<em>xmpp.muc.destroy</em>` event as follows:</p>

        <pre class="in">
        socket.on('xmpp.muc.destroy', function(data) {
            console.log(data)
            /* {
                 room: "test@conference.evilprofessor.co.uk",
              /* reason: "Killed test room" */
              /* alternative: "test2@conference.evilprofessor.co.uk" */
               } */
        })
        </pre>

<% include ./partials/footer %>
