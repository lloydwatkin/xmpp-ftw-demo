<%
    pageTitle = "XMPP Core"
%>
<% include ./partials/head %>

        <div id="toc"></div>

        <h2>Authentication</h2>

        <h3>Login</h3>

        <pre class="out" message="xmpp.login">
        socket.emit(
             'xmpp.login',
             {
                 "jid": "test@evilprofessor.co.uk",
                 "password": "password",
              /* "resource": "xmpp-ftw", */
              /* "host": "127.0.0.1" */
             }
        )
        </pre>

        <p>You can also add an optional parameter of <i>resource</i>, if not provided the XMPP
           server will add this automatically.</p>

        <p>On succesful connection an incoming message comes in as follows:</p>

        <pre class="in" message="xmpp.connection">
        socket.on('xmpp.connection', function(data) {
            console.log(data)
            /* {
             *   status: 'online',
             *   jid: {
             *     domain: 'evilprofessor.co.uk',
             *     user: 'lloyd',
             *     resource: 'desktop'
             *   }
             * }
             */
        })
        </pre>

        <h4>Anonymous Login</h4>

        <pre class="out" message="xmpp.login.anonymous">
        socket.emit(
            'xmpp.login.anonymous',
            {
                "jid": "anon.evilprofessor.co.uk",
             /* "host": "evilprofessor.co.uk" */
            }
        )
        </pre>

        <h3>Logout</h3>

        <p>Logout is performed with the following call:</p>

        <pre class="out callback" message="xmpp.logout">
        socket.emit(
            'xmpp.logout',
            {},
            function(error, data) { console.log(error, data) }
        )
        </pre>

        <p>If no callback is provided then the socket will be terminated.</p>

        <h2>Messaging</h2>

        <h3>Send a message</h3>

        <pre class="out" message="xmpp.chat.message">
        socket.emit(
            'xmpp.chat.message',
            {
                "to": "other@evilprofessor.co.uk",
                "content": "Hello world",
             /* "format": "plain", */
             /* "state": "composing" */
            }
        )
        </pre>

        <p>By setting the value of '<em>format</em>' to '<b>xhtml</b>' the
        client can invoke
        <a href="http://xmpp.org/extensions/xep-0071.html" target="_blank">XEP-0071</a>
        a missing or not-'xhtml' value results in a plain message. A plain
        text version of XHTML messages are generated by XMPP-FTW and sent
        alongside XHTML messages.</p>

        <p>It is also possible to send just a
        <a href="http://xmpp.org/extensions/xep-0085.html" target="_blank">
        chat state notification</a> by adding the '<em>state</em>' key or
        by sending the '<em>state</em>' key by itself.</p>

        <h3>Receive a chat message</h3>

        <pre class="in" message="xmpp.chat.message">
        socket.on('xmpp.chat.message', function(data) {
            console.log(data)
        })
        </pre>

        <p>Example:</p>

        <pre class="example">
        {
            from: {
                domain: 'evilprofessor.co.uk',
                user: 'megan'
            },
            content: 'Hello fine Lady!',
            format: 'plain',
         /* delay: {
                from: 'evilprofessor.co.uk',
                when: '2013-06-03T19:56Z',
                reason: 'Offline storage'
            }, */
         /* state: 'active' */
         /* archived: [
              { by: { domain: 'evilprofessor.co.uk' }, id: 'archive:1' }
            ] */
        }
        </pre>

        <p>The value of '<em>format</em>' will be <b>xhtml</b> for XEP-0071
        type messages. You will only ever receive a plain text or XHTML
        message, not both. '<em>state</em>' represents a chat state
        notification.</p>

        <p>The <em>archived</em> key can only be present if your
        server supports and is using
        <a href="/manual/message-archive-management">XEP-313 (MAM)</a>.
        </p>

        <p>Alternatively a
        <a href="http://xmpp.org/extensions/xep-0085.html" target="_blank">
        chat state notification</a> may be received as follows:</p>

        <pre class="example">
        {
            state: 'active'
        }
        </pre>

        <h2>Presence</h2>

        <h3>Set presence</h3>

        <pre class="out" message="xmpp.presence">
        socket.emit(
            'xmpp.presence',
            {
                "show": "online",
                "status": "I'm using xmpp-ftw!",
                "priority": 10,
             /* "to": "megan@evilprofessor.co.uk/mobile" */
            }
        )
        </pre>

        <p>Each of the parameters for presence are <i>optional</i>. You can include <a href="http://xmpp.org/extensions/xep-0115.html" target="_blank">entity capabilities</a> by adding a key of `<em>client` as follows:</p>

        <pre class="example">
        client: {
            hash: 'sha-1',
            ver: 'QgafEg5pkPSDYmwT/WFggBguAlu0+',
            node: 'http://xmpp-ftw.jit.su/chat-client'
        }
        </pre>

        <h3>Receive presence</h3>

        <pre class="in" message="xmpp.presence">
        socket.on('xmpp.presence', function(data) {
            console.log(data);
            /*
             * {
             *   from: { domain: 'evilprofessor.co.uk', user: 'lloyd'},
             *   show: 'away',
             *   status: "I'm going away",
             *   priority: 10
             * }
             * ...each of these are optional...
             */
        })
        </pre>

        <p>Again <a href="http://xmpp.org/extensions/xep-0115.html" target="_blank">entity capabilities</a>
        can be received on a `<em>client</em>` key as with the
        example abolve.</p>

        <h3>Directed presence</h3>

        <pre class="out" message="xmpp.presence.get">
        socket.emit('xmpp.presence.get', { "to": "user@evilprofessor.co.uk" })
        </pre>

        <h3>Go offline</h3>

        <pre class="out" message="xmpp.presence.offline">
        socket.emit('xmpp.presence.offline' /*, {} */ )
        </pre>

        <h3>Subscribe</h3>

        <p>Request to subsribe to a user</p>

        <pre class="out" message="xmpp.presence.subscribe">
        socket.emit('xmpp.presence.subscribe', { "to": "user@evilprofessor.co.uk" })
        </pre>

        <p>User requests to subscribe to your presence</p>
        <pre class="in" message="xmpp.presence.subscribe">
        socket.on('xmpp.presence.subscribe', function(data) {
            console.log(data)
        })
        </pre>

        <p>Example:</p>

        <pre class="example">
        {
            from: { user: 'user', domain: 'evilprofessor.co.uk' },
            nick: 'Example user' // ...optional...
        }
        </pre>

        <p>Respond with subscribed or unsubscribed</p>

        <pre class="out" message="xmpp.presence.subscribed">
        socket.emit(
            'xmpp.presence.subscribed',
            {
                "to": "user@evilprofessor.co.uk"
            }
        )
        </pre>

        <pre class="out" message="xmpp.presence.unsubscribed">
        socket.emit(
            'xmpp.presence.unsubscribed',
            {
                "to": "user@evilprofessor.co.uk"
            }
        )
        </pre>

        <h3>Presence Errors</h3>

        <p>Presence errors are emitting using the
        '<em>xmpp.presence.error</em>' event name, for example:</p>

        <pre class="in" message="xmpp.presence.error">
        {
            error: "remote-server-not-found",
         /* from: {
                user: "user",
                domain: "niceprofessor.co.uk"
            } */
        }
        </pre>

        <h2>Roster</h2>

        <h3>Add user to roster</h3>

        <pre class="out callback" message="xmpp.roster.add">
        socket.emit(
            'xmpp.roster.add',
            {
                "jid": "user@evilprofessor.co.uk",
             /* "name": "Example user", */
             /* "groups": [ "example-users" ] */
            },
            function(error, data) { console.log(error, data) }
        )
        </pre>

        <h3>Remove a user from roster</h3>

        <pre class="out callback" message="xmpp.roster.remove">
        socket.emit(
            'xmpp.roster.remove',
            {
                "jid": "user@evilprofessor.co.uk"
            },
            function(error, data) { console.log(error, data) }
        )
        </pre>

        <h3>Get</h3>

        <pre class="out callback" message="xmpp.roster.get">
        socket.emit(
            'xmpp.roster.get',
            {},
            function(error, data) { console.log(error, data) }
        )
        </pre>

        <p>Data returns as array of objects, e.g.</p>

        <pre class="example">
          [ {
               jid: { user: 'user', domain: 'evilprofessor.co.uk' },
               subscription: 'both',
               name: 'Example user',
               groups: [ 'Buddies', 'XMPP' ]
            /* ask = 'subscribe' */
          } ]
        </pre>

        <h3>New incoming Roster request</h3>

        <pre class="in" message="xmpp.roster.push">
        socket.on('xmpp.roster.push', function(data) {
            console.log(data);
        })
        </pre>

        <p>Example:</p>
        <pre class="example">
          {
               jid: { user: 'user', domain: 'evilprofessor.co.uk' },
               subscription: 'both',
               name: 'Example user',
               groups: [ 'Buddies' ],
            /* ask = 'subscribe' */
          }
        </pre>

        <h3>Edit a user</h3>

        <p><strong>Note:</strong> Existing groups will be erased, therefore
        you must include all roster groups in this list. Existing name will be 
        erased too if not provided.</p>

        <pre class="out callback" message="xmpp.roster.edit">
        socket.emit(
            'xmpp.roster.edit',
            {
                "jid": "user@evilprofessor.co.uk",
                "groups": [ "buddies", "colleagues" ],
                /* "name": "Evil User" */
            },
            function(error, data) { console.log(error, data) }
        )
        </pre>

        <p>On success `<em>data</em>` will simply be
        <strong>true</strong>.</p>

<% include ./partials/footer %>